package com.gocypher.cybench.toolWindow;

import com.gocypher.cybench.utils.CyBenchIcons;
import com.gocypher.cybench.utils.NodeAndTabFiller;
import com.gocypher.cybench.utils.ResultFileParser;
import com.gocypher.cybench.launcher.model.BenchmarkReport;
import com.gocypher.cybench.utils.Nodes;
import com.intellij.ide.ui.laf.darcula.ui.DarculaTabbedPaneUI;
import com.intellij.openapi.project.ProjectUtil;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.ui.ColoredTreeCellRenderer;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.components.JBTabbedPane;
import com.intellij.ui.treeStructure.Tree;
import org.codehaus.jettison.json.JSONException;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;

public class CyBenchToolWindow {

    private File file;
    private JPanel toolWindowContent;
    private Tree reportList;
    private JSplitPane splitPane;
    private JTabbedPane tabs;
    private HashMap<String, JScrollPane> testResultTabs = new HashMap<>();


    public CyBenchToolWindow(ToolWindow toolWindow, File file) {
        $$$setupUI$$$();
        createUIComponents();
        this.file = file;
        if (file == null) {
            this.file = new File(ProjectUtil.guessCurrentProject(getContent()).getBasePath() + "/reports/report.json");
        }

        reportList.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
        reportList.setCellRenderer(new CyBenchTreeCellRenderer());
        reportList.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                Object selected = e.getPath().getLastPathComponent();

                if (selected instanceof Nodes.BenchmarkClassNode) {

                }
                if (selected instanceof Nodes.BenchmarkTestNode) {
                    tabs.setSelectedComponent(testResultTabs.get(((Nodes.BenchmarkTestNode) selected).getUserObject()));

                }
            }
        });

        populateNodeFromFile();

    }

    public static void main(String[] args) {
        JDialog d = new JDialog();
        d.setModal(true);
        CyBenchToolWindow dialog = new CyBenchToolWindow(null, null);

        d.setContentPane(dialog.getContent());
        d.pack();
        d.setVisible(true);
        System.exit(0);
    }

    private void populateNodeFromFile() {

        ResultFileParser resultFileParser = new NodeAndTabFiller(testResultTabs, tabs) {
            @Override
            public void onTest(BenchmarkReport report) {
                String name = report.getName();
                Nodes.addClass(name.substring(0, name.lastIndexOf('.')), reportList);
                Nodes.addTest(name, reportList);
                super.onTest(report);
            }
        };

        try {
            resultFileParser.parse(file);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }

    }


    public JPanel getContent() {
        return toolWindowContent;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        toolWindowContent = new JPanel();
        toolWindowContent.setLayout(new BorderLayout(0, 0));
        splitPane = new JSplitPane();
        toolWindowContent.add(splitPane, BorderLayout.CENTER);


    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return toolWindowContent;
    }

    private void createUIComponents() {
        reportList = new Tree();
        reportList.setRootVisible(false);



        JBScrollPane scroll = new JBScrollPane(reportList, VERTICAL_SCROLLBAR_ALWAYS, HORIZONTAL_SCROLLBAR_ALWAYS);

        splitPane.setLeftComponent(scroll);


        tabs = new JBTabbedPane();

        //do not show tab header; navigation enabled with tree
        tabs.setUI(new DarculaTabbedPaneUI() {
            @Override
            protected int calculateTabHeight(int tabPlacement, int tabIndex, int fontHeight) {
                return 0;
            }
        });
        // TODO: place custom component creation code here
        splitPane.setRightComponent(tabs);
    }

    public File getFile() {
        return file;
    }


    private static class CyBenchTreeCellRenderer extends ColoredTreeCellRenderer {
        @Override
        public void customizeCellRenderer(@NotNull JTree jTree, Object o, boolean b, boolean b1, boolean b2, int i, boolean b3) {
            if (o instanceof Nodes.BenchmarkClassNode) {
                setIcon(CyBenchIcons.classNodeIcon);

            }
            if (o instanceof Nodes.BenchmarkTestNode) {
                setIcon(CyBenchIcons.testNodeIcon);

            }
            if (o instanceof DefaultMutableTreeNode) {
                append(String.valueOf(((DefaultMutableTreeNode) o).getUserObject()));
            }
        }
    }
}
